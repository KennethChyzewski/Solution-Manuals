class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        coords = [(1,0), (-1,0), (0,1), (0,-1)]
        rows = len(heights)
        cols = len(heights)
        pacific_reachable = []
        atlantic_reachable = []
        for i in range(rows):
            pacific_reachable.append((0, i))
            atlantic_reachable.append((cols-1, i))
        for i in range(cols):
            pacific_reachable.append((i, 0))
            atlantic_reachable.append((i, rows-1))
            
        def bfs(queue):
            reachable = set()
            while queue:
                (row, col) = queue.pop(0)
                reachable.add((row, col))
                for (x,y) in coords:
                    new_row, new_col = row + x, col + y
                    if new_row < 0 or new_row >= rows or new_col < 0 or new_col >= cols:
                        continue
                    if (new_row, new_col) in reachable:
                        continue
                    if heights[new_row][new_col] < heights[row][col]:
                        continue
                    queue.append((new_row, new_col))
            return reachable
        
        pacific_reachable = bfs(pacific_reachable)
        atlantic_reachable = bfs(atlantic_reachable)
        
        return list(set(pacific_reachable) & set(atlantic_reachable))

